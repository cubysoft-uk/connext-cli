sigue activo



 ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ïö‚ñà‚ñà‚ñà‚ïî‚ïù    ‚ñà‚ñà‚ïë        ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù   ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïë   ‚ñà‚ñà   ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë
‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
 ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

version 1.0.3
‚úî Selecciona el tipo de proyecto: TypeScript
‚úî Ingresa el nombre del proyecto: my-app
‚úî Carpeta creada.
‚†ã Creando estructura de archivos...‚úîÔ∏è Copiado: index.ts
‚úîÔ∏è Copiado: package.json
‚úî Estructura creada.
‚†ã Instalando dependencias...Instalando dependencias en /home/admin-dev/Documentos/VsCode/connext-cli/my-app...
‚†º Instalando dependencias...
added 1 package, and audited 2 packages in 2s

found 0 vulnerabilities

‚úî Dependencias instaladas.
üéä ¬°Proyecto my-app listo!







#!/usr/bin/env node
import { select, input } from '@inquirer/prompts';
import { WebSocketProvider } from 'ethers';
import figlet from 'figlet';
import gradient from 'gradient-string';
import chalk from 'chalk';
import fs from 'fs';
import path from 'path';
import { exec } from 'child_process';
import ora from 'ora';
import { fileURLToPath } from 'url';

// Obtener el directorio equivalente a __dirname en ES6
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Funci√≥n para limpiar recursos
const cleanup = [];
async function cleanupResources() {
  for (const c of cleanup.reverse()) {
    await c();
  }
}

// Funci√≥n para copiar archivos desde la plantilla
function copyTemplateFiles(projectPath, projectType) {
  const templatePath = path.join(process.cwd(), 'templates', projectType);
  fs.readdirSync(templatePath).forEach(file => {
    const srcFile = path.join(templatePath, file);
    const destFile = path.join(projectPath, file);
    fs.copyFileSync(srcFile, destFile);
  });
}

// Funci√≥n para instalar dependencias
function installDependencies(projectPath) {
  return new Promise((resolve, reject) => {
    exec('npm install', { cwd: projectPath }, (error, stdout, stderr) => {
      if (error) {
        console.error(`‚ö†Ô∏è Error al instalar dependencias: ${error.message}`);
        reject(error);
        return;
      }
      console.log(stdout);
      resolve();
    });
  });
}

// Funci√≥n para mostrar el logo ASCII con gradiente
function displayAsciiLogo() {
  const logoPath = path.join(__dirname, 'logo.txt');
  const logo = fs.readFileSync(logoPath, 'utf8');
  
  // Aplicar gradiente al logo
  const gradientLogo = gradient(['#00aaff', '#aa00ff']);
  console.log(gradientLogo.multiline(logo));
}

// Funci√≥n para mostrar un mensaje de despedida con gradiente desde bye.txt
async function exitWithDecoration() {
  console.clear();
  
  const byePath = path.join(__dirname, 'bye.txt');
  if (fs.existsSync(byePath)) {
    const byeMessage = fs.readFileSync(byePath, 'utf8');
    
    // Aplicar gradiente al mensaje de despedida
    const gradientBye = gradient(['#ff6600', '#ff0066']);
    console.log(gradientBye.multiline(byeMessage));
  } else {
    // Si no existe el archivo bye.txt, mostrar un mensaje por defecto
    const exitMessage = figlet.textSync('Adi√≥s!', {
      font: 'Standard',
      horizontalLayout: 'default',
      verticalLayout: 'default',
    });
    console.log(chalk.redBright(exitMessage));
  }

  console.log(chalk.yellow('¬°Gracias por usar Connext CLI!'));
  await cleanupResources();
  process.exit(0);
}

// Funci√≥n para crear un proyecto b√°sico
async function createProject(projectType) {
  const projectName = await input({
    message: chalk.yellow('Ingresa el nombre del proyecto:'),
    default: 'my-app', // Placeholder por defecto
  });
  const projectPath = path.join(process.cwd(), projectName);

  if (fs.existsSync(projectPath)) {
    if (fs.readdirSync(projectPath).length > 0) {
      console.error(chalk.red(`‚ùå No se puede crear el proyecto: la carpeta ${projectName} contiene archivos.`));
      process.exit(1);
    }
  } else {
    const spinner = ora('Creando carpeta del proyecto...').start();
    fs.mkdirSync(projectPath, { recursive: true });
    spinner.succeed('Carpeta creada.');
  }

  const spinner = ora('Creando estructura de archivos...').start();
  // Copiar archivos de la plantilla
  copyTemplateFiles(projectPath, projectType);
  spinner.succeed('Estructura creada.');

  spinner.start('Instalando dependencias...');
  await installDependencies(projectPath);
  spinner.succeed('Dependencias instaladas.');

  spinner.start('Verificando proyecto...');
  // Aqu√≠ puedes hacer cualquier otra verificaci√≥n que necesites
  spinner.succeed('Proyecto verificado.');

  console.log(`üéä ¬°Proyecto ${projectName} listo!`);
}

async function main() {
  console.clear();

  // Mostrar logo con gradiente
  displayAsciiLogo();

  const gradientText = gradient(['#00aaff', '#aa00ff'])('version 1.0.1');
  console.log(gradientText);

  let provider;
  try {
    provider = new WebSocketProvider('wss://ethereum-sepolia-rpc.publicnode.com');
    cleanup.push(() => {
      if (provider && provider._websocket && provider._websocket.readyState === provider._websocket.OPEN) {
        return provider.destroy();
      }
    });
  } catch (error) {
    console.error('‚ö†Ô∏è Error al crear el WebSocket provider:', error.message);
    return;
  }

  process.on('SIGINT', async () => {
    await exitWithDecoration();
  });

  process.on('SIGTERM', async () => {
    await exitWithDecoration();
  });

  try {
    const projectType = await select({
      message: chalk.yellow('Selecciona el tipo de proyecto:'),
      choices: [
        { value: 'basic-html', name: 'HTML' },
        { value: 'basic-js', name: 'JavaScript' },
        { value: 'basic-ts', name: 'TypeScript' },
      ],
    });

    await createProject(projectType);

    await cleanupResources();
    process.exit(0);
  } catch (error) {
    console.error('‚ö†Ô∏è Ocurri√≥ un error:', error.message);
    await cleanupResources();
    process.exit(1);
  }
}

main().catch(console.error);

que tiene ese script que no tenga todos los otros 

porque es que ese funciona pero como te digo es un ejemplo, una referencia, toma lo que te pueda servir y a√±adelo a los scripts necesarios



te mostrare los otros scripts actualizados


y para que me ayudes a deducir porque qued como cargando o esperando algo durante un tiempo






// components/utils.js

import { exec } from 'child_process';
import fs from 'fs';
import path from 'path';
import gradient from 'gradient-string';
import inquirer from 'inquirer';
import { logoPath, byePath } from '../icon/route.js';

// Funci√≥n para crear un proyecto basado en la plantilla seleccionada
export async function createProject() {
  const templatesDir = path.join(process.cwd(), 'templates');
  
  // Obtener las plantillas disponibles
  const templates = fs.readdirSync(templatesDir).filter(file => {
    return fs.statSync(path.join(templatesDir, file)).isDirectory();
  });

  // Preguntar al usuario por el tipo de proyecto
  const { projectType } = await inquirer.prompt([
    {
      type: 'list',
      name: 'projectType',
      message: 'Selecciona el tipo de proyecto:',
      choices: templates,
    },
  ]);

  // Preguntar por el nombre del proyecto
  const { projectName } = await inquirer.prompt([
    {
      type: 'input',
      name: 'projectName',
      message: 'Ingresa el nombre del proyecto:',
    },
  ]);

  const projectPath = path.join(process.cwd(), projectName);

  // Crear la carpeta del proyecto
  fs.mkdirSync(projectPath, { recursive: true });

  // Copiar archivos desde la plantilla
  copyTemplateFiles(projectPath, projectType);
  
  // Instalar dependencias y esperar su finalizaci√≥n
  await installDependencies(projectPath);

  console.log(üéä ¬°Proyecto ${projectName} listo!);
  
  // Salir del proceso
  process.exit(0); // Aseg√∫rate de que el proceso se cierre despu√©s de completar las tareas.
}

// Funci√≥n para copiar archivos desde la plantilla
export function copyTemplateFiles(projectPath, projectType) {
  const templatePath = path.join(process.cwd(), 'templates', projectType);
  fs.readdirSync(templatePath).forEach(file => {
    const srcFile = path.join(templatePath, file);
    const destFile = path.join(projectPath, file);
    fs.copyFileSync(srcFile, destFile);
  });
}

// Funci√≥n para instalar dependencias
export function installDependencies(projectPath) {
  return new Promise((resolve, reject) => {
    console.log(Instalando dependencias en ${projectPath}...);
    exec('npm install', { cwd: projectPath }, (error, stdout, stderr) => {
      if (error) {
        console.error(‚ö†Ô∏è Error al instalar dependencias: ${error.message});
        reject(error);
        return;
      }
      console.log(stdout);
      resolve(); // Resuelve la promesa al finalizar la instalaci√≥n
    });
  });
}

// Funci√≥n para mostrar el logo ASCII con gradiente
export function displayAsciiLogo() {
  if (fs.existsSync(logoPath)) {
    const logo = fs.readFileSync(logoPath, 'utf8');
    const gradientLogo = gradient(['#00aaff', '#aa00ff']);
    console.log(gradientLogo.multiline(logo));
  } else {
    console.error('‚ö†Ô∏è No se encontr√≥ el archivo logo.txt en la ubicaci√≥n especificada.');
  }
}

// Array para funciones de limpieza
export const cleanup = [];

// Funci√≥n para limpiar recursos
export async function cleanupResources() {
  for (const c of cleanup.reverse()) {
    await c();
  }
}

// Funci√≥n para salir con un mensaje decorado
export async function exitWithDecoration() {
  console.clear();
  
  // Lee el mensaje de despedida desde el archivo
  let byeMessage;
  try {
    byeMessage = fs.readFileSync(byePath, 'utf8');
  } catch (error) {
    console.error('‚ö†Ô∏è No se pudo leer el archivo de despedida:', error.message);
    byeMessage = '¬°Gracias por usar Connext CLI! Adi√≥s!';
  }

  // Muestra el mensaje con un gradiente
  const gradientBye = gradient(['#ff6600', '#ff0066']);
  console.log(gradientBye.multiline(byeMessage));
  
  console.log('¬°Gracias por usar Connext CLI!');
  await cleanupResources();
  process.exit(0);
}




// components/version.js
import fs from 'fs';
import path from 'path';
import gradient from 'gradient-string';
import { versionPath } from '../icon/route.js'; // Importar la ruta desde route.js

export function displayVersion() {
  let logo = '';

  if (fs.existsSync(versionPath)) {
    logo = fs.readFileSync(versionPath, 'utf8');
  }

  const gradientLogo = gradient(['#00aaff', '#aa00ff']);
  console.log(gradientLogo.multiline(logo));
}





//components/update.js

import { exec } from 'child_process';
import ora from 'ora';

// Funci√≥n para actualizar todas las dependencias
export function updateDependencies() {
  return new Promise((resolve, reject) => {
    const projectPath = process.cwd();
    const spinner = ora('Actualizando dependencias...').start();

    exec('npm update', { cwd: projectPath }, (error, stdout, stderr) => {
      if (error) {
        spinner.fail(‚ö†Ô∏è Error al actualizar dependencias: ${error.message});
        reject(error);
        return;
      }
      spinner.succeed('Dependencias actualizadas.');
      console.log(stdout);
      resolve();
    });
  });
}







//components/promts.js

import { select as inquirerSelect } from '@inquirer/prompts';

// Aseg√∫rate de que el nombre de la funci√≥n exportada sea 'select'
export async function select(options) {
    return await inquirerSelect(options);
}




// components/logos.js

import gradient from 'gradient-string';
import { logoPath, byePath } from '../icon/route.js';
import fs from 'fs';

export function displayLogo() {
  const gradientLogo = gradient(['#00aaff', '#aa00ff']);
  if (fs.existsSync(logoPath)) {
    const logo = fs.readFileSync(logoPath, 'utf8');
    console.log(gradientLogo.multiline(logo));
  } else {
    console.error('‚ö†Ô∏è No se encontr√≥ el archivo logo.txt en la ubicaci√≥n especificada.');
  }
}

export async function displayBye() {
  const byeMessage = fs.existsSync(byePath) 
    ? fs.readFileSync(byePath, 'utf8') 
    : '¬°Gracias por usar Connext CLI! Adi√≥s!';
  console.log(gradient(['#ff6600', '#ff0066']).multiline(byeMessage));
}






// components/help.js

import gradient from 'gradient-string';
import { logoPath } from '../icon/route.js'; // Importar la ruta desde route.js
import fs from 'fs';

export function displayHelp() {
  const gradientLogo = gradient(['#00aaff', '#aa00ff']);
  if (fs.existsSync(logoPath)) {
    const logo = fs.readFileSync(logoPath, 'utf8');
    console.log(gradientLogo.multiline(logo));
  } else {
    console.error('‚ö†Ô∏è No se encontr√≥ el archivo logo.txt en la ubicaci√≥n especificada.');
  }

  console.log(
    'Connext es una herramienta CLI para crear y gestionar proyectos de manera eficiente.'
  );

  console.log(
    Uso: connext [opciones]

    Opciones:
      --help      Muestra este mensaje de ayuda
      -h          Muestra este mensaje de ayuda
      --version   Muestra la versi√≥n actual del CLI
      -v          Muestra la versi√≥n actual del CLI
      update      Actualiza todas las dependencias del proyecto

    Ejemplos:
      connext create     Crea un nuevo proyecto.
      connext update     Actualiza todas las dependencias.
      connext --help     Muestra este mensaje de ayuda.
      connext --version  Muestra la versi√≥n del CLI.

    Versi√≥n: v1.0.3

    Soporte:
      Para reportar problemas, visita nuestro repositorio en GitHub: https://github.com/tuusuario/connext-cli

    Licencia:
      Este proyecto est√° licenciado bajo la MIT License.
  );
}






#!/usr/bin/env node
//bin/index.js
import { select } from '@inquirer/prompts';
import { displayHelp } from '../components/help.js';
import { updateDependencies } from '../components/update.js';
import { displayVersion } from '../components/version.js';
import { cleanupResources, exitWithDecoration, displayAsciiLogo } from '../components/utils.js';
import { createProject } from './create.js';
import { WebSocketProvider } from 'ethers';
import chalk from 'chalk';
import gradient from 'gradient-string';
import { fileURLToPath } from 'url';
import path from 'path';

// Obtener el directorio equivalente a __dirname en ES6
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Manejar la se√±al de ctrl + c
process.on('SIGINT', async () => {
  await exitWithDecoration();
});

process.on('SIGTERM', async () => {
  await exitWithDecoration();
});

async function main() {
  console.clear();

  // Si el usuario ingresa el comando --help o -h, mostrar la ayuda
  if (process.argv.includes('--help') || process.argv.includes('-h')) {
    displayHelp();
    return;
  }

  // Manejar el comando de versi√≥n
  if (process.argv.includes('--version') || process.argv.includes('-v')) {
    displayVersion();
    return;
  }

  // Manejar el comando de actualizaci√≥n
  if (process.argv.includes('update')) {
    try {
      await updateDependencies();
      return;
    } catch (error) {
      console.error('‚ö†Ô∏è Ocurri√≥ un error al actualizar las dependencias:', error.message);
      process.exit(1);
    }
  }

  // Manejar el comando 'create'
  if (process.argv.includes('create')) {
    try {
      // Mostrar logo con gradiente antes de iniciar el proceso de creaci√≥n
      displayAsciiLogo();
      const gradientText = gradient(['#00aaff', '#aa00ff'])('version 1.0.3');
      console.log(gradientText);

      let provider;
      try {
        provider = new WebSocketProvider('wss://ethereum-sepolia-rpc.publicnode.com');
      } catch (error) {
        console.error('‚ö†Ô∏è Error al crear el WebSocket provider:', error.message);
        return;
      }

      const projectType = await select({
        message: chalk.yellow('Selecciona el tipo de proyecto:'),
        choices: [
          { value: 'basic-html', name: 'HTML' },
          { value: 'basic-js', name: 'JavaScript' },
          { value: 'basic-ts', name: 'TypeScript' },
        ],
      });

      await createProject(projectType);
      await cleanupResources();
      return;
    } catch (error) {
      console.error('‚ö†Ô∏è Ocurri√≥ un error:', error.message);
      await cleanupResources();
      process.exit(1);
    }
  }

  // Si no se reconoce el comando, mostrar un mensaje de ayuda
  console.log('‚ö†Ô∏è Comando no reconocido. Usa --help para ver las opciones disponibles.');
  process.exit(1);
}

main().catch(console.error);

// bin/create.js

import { input } from '@inquirer/prompts';
import ora from 'ora';
import fs from 'fs';
import path from 'path';
import { copyTemplateFiles, installDependencies } from '../components/utils.js';

export async function createProject(projectType) {
  const projectName = await input({
    message: 'Ingresa el nombre del proyecto:',
    default: 'my-app',
  });
  const projectPath = path.join(process.cwd(), projectName);

  if (fs.existsSync(projectPath) && fs.readdirSync(projectPath).length > 0) {
    console.error(‚ùå No se puede crear el proyecto: la carpeta ${projectName} contiene archivos.);
    process.exit(1);
  } else {
    const spinner = ora('Creando carpeta del proyecto...').start();
    fs.mkdirSync(projectPath, { recursive: true });
    spinner.succeed('Carpeta creada.');
  }

  const spinner = ora('Creando estructura de archivos...').start();
  copyTemplateFiles(projectPath, projectType);
  spinner.succeed('Estructura creada.');

  spinner.start('Instalando dependencias...');
  await installDependencies(projectPath);
  spinner.succeed('Dependencias instaladas.');

  console.log(üéä ¬°Proyecto ${projectName} listo!);
}







//bin/cleanup.js

export const cleanup = [];

export async function cleanupResources() {
  for (const c of cleanup.reverse()) {
    await c();
  }
}






import path from 'path';
import { fileURLToPath } from 'url';

// Obtener el equivalente a __dirname en m√≥dulos ES6
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Funci√≥n para obtener la ruta absoluta de un archivo en la carpeta icon
export const getIconPath = (fileName) => path.join(__dirname, fileName);

// Exportar rutas espec√≠ficas para los archivos .txt
export const logoPath = getIconPath('logo.txt');
export const byePath = getIconPath('bye.txt');
export const versionPath = getIconPath('version.txt');





script de referencia para que veas y quizas te guie o te heche una mano





#!/usr/bin/env node
import { select, input } from '@inquirer/prompts';
import { WebSocketProvider } from 'ethers';
import figlet from 'figlet';
import gradient from 'gradient-string';
import chalk from 'chalk';
import fs from 'fs';
import path from 'path';
import { exec } from 'child_process';
import ora from 'ora';
import { fileURLToPath } from 'url';

// Obtener el directorio equivalente a __dirname en ES6
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Funci√≥n para limpiar recursos
const cleanup = [];
async function cleanupResources() {
  for (const c of cleanup.reverse()) {
    await c();
  }
}

// Funci√≥n para copiar archivos desde la plantilla
function copyTemplateFiles(projectPath, projectType) {
  const templatePath = path.join(process.cwd(), 'templates', projectType);
  fs.readdirSync(templatePath).forEach(file => {
    const srcFile = path.join(templatePath, file);
    const destFile = path.join(projectPath, file);
    fs.copyFileSync(srcFile, destFile);
  });
}

// Funci√≥n para instalar dependencias
function installDependencies(projectPath) {
  return new Promise((resolve, reject) => {
    exec('npm install', { cwd: projectPath }, (error, stdout, stderr) => {
      if (error) {
        console.error(‚ö†Ô∏è Error al instalar dependencias: ${error.message});
        reject(error);
        return;
      }
      console.log(stdout);
      resolve();
    });
  });
}

// Funci√≥n para mostrar el logo ASCII con gradiente
function displayAsciiLogo() {
  const logoPath = path.join(__dirname, 'logo.txt');
  const logo = fs.readFileSync(logoPath, 'utf8');
  
  // Aplicar gradiente al logo
  const gradientLogo = gradient(['#00aaff', '#aa00ff']);
  console.log(gradientLogo.multiline(logo));
}

// Funci√≥n para mostrar un mensaje de despedida con gradiente desde bye.txt
async function exitWithDecoration() {
  console.clear();
  
  const byePath = path.join(__dirname, 'bye.txt');
  if (fs.existsSync(byePath)) {
    const byeMessage = fs.readFileSync(byePath, 'utf8');
    
    // Aplicar gradiente al mensaje de despedida
    const gradientBye = gradient(['#ff6600', '#ff0066']);
    console.log(gradientBye.multiline(byeMessage));
  } else {
    // Si no existe el archivo bye.txt, mostrar un mensaje por defecto
    const exitMessage = figlet.textSync('Adi√≥s!', {
      font: 'Standard',
      horizontalLayout: 'default',
      verticalLayout: 'default',
    });
    console.log(chalk.redBright(exitMessage));
  }

  console.log(chalk.yellow('¬°Gracias por usar Connext CLI!'));
  await cleanupResources();
  process.exit(0);
}

// Funci√≥n para crear un proyecto b√°sico
async function createProject(projectType) {
  const projectName = await input({
    message: chalk.yellow('Ingresa el nombre del proyecto:'),
    default: 'my-app', // Placeholder por defecto
  });
  const projectPath = path.join(process.cwd(), projectName);

  if (fs.existsSync(projectPath)) {
    if (fs.readdirSync(projectPath).length > 0) {
      console.error(chalk.red(‚ùå No se puede crear el proyecto: la carpeta ${projectName} contiene archivos.));
      process.exit(1);
    }
  } else {
    const spinner = ora('Creando carpeta del proyecto...').start();
    fs.mkdirSync(projectPath, { recursive: true });
    spinner.succeed('Carpeta creada.');
  }

  const spinner = ora('Creando estructura de archivos...').start();
  // Copiar archivos de la plantilla
  copyTemplateFiles(projectPath, projectType);
  spinner.succeed('Estructura creada.');

  spinner.start('Instalando dependencias...');
  await installDependencies(projectPath);
  spinner.succeed('Dependencias instaladas.');

  spinner.start('Verificando proyecto...');
  // Aqu√≠ puedes hacer cualquier otra verificaci√≥n que necesites
  spinner.succeed('Proyecto verificado.');

  console.log(üéä ¬°Proyecto ${projectName} listo!);
}

async function main() {
  console.clear();

  // Mostrar logo con gradiente
  displayAsciiLogo();

  const gradientText = gradient(['#00aaff', '#aa00ff'])('version 1.0.1');
  console.log(gradientText);

  let provider;
  try {
    provider = new WebSocketProvider('wss://ethereum-sepolia-rpc.publicnode.com');
    cleanup.push(() => {
      if (provider && provider._websocket && provider._websocket.readyState === provider._websocket.OPEN) {
        return provider.destroy();
      }
    });
  } catch (error) {
    console.error('‚ö†Ô∏è Error al crear el WebSocket provider:', error.message);
    return;
  }

  process.on('SIGINT', async () => {
    await exitWithDecoration();
  });

  process.on('SIGTERM', async () => {
    await exitWithDecoration();
  });

  try {
    const projectType = await select({
      message: chalk.yellow('Selecciona el tipo de proyecto:'),
      choices: [
        { value: 'basic-html', name: 'HTML' },
        { value: 'basic-js', name: 'JavaScript' },
        { value: 'basic-ts', name: 'TypeScript' },
      ],
    });

    await createProject(projectType);

    await cleanupResources();
    process.exit(0);
  } catch (error) {
    console.error('‚ö†Ô∏è Ocurri√≥ un error:', error.message);
    await cleanupResources();
    process.exit(1);
  }
}

main().catch(console.error);